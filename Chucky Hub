--!strict
-- Khởi tạo cơ bản
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local Comm = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Comm")

-- Load Fluent UI (đảm bảo bạn có kết nối mạng)
repeat wait() until game:IsLoaded()
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Chucky Hub",
    SubTitle = "Blox Fruits",
    TabWidth = 157,
    Size = UDim2.fromOffset(480, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.End
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main" })
}

-- Label trạng thái
local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(1, -20, 0, 30)
statusLabel.Position = UDim2.new(0, 10, 0, 5)
statusLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
statusLabel.BorderSizePixel = 0
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.TextScaled = true
statusLabel.Text = "Trạng thái: Đang chờ..."
statusLabel.Parent = Window.Window

-- Hàm tween di chuyển
local function TweenToPosition(targetPos)
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local distance = (hrp.Position - targetPos).Magnitude
    local tweenInfo = TweenInfo.new(distance / 50, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = CFrame.new(targetPos + Vector3.new(0, 3, 0))})
    tween:Play()
    tween.Completed:Wait()
end

-- Lưu trạng thái toggle
local function SaveToggle(name, state)
    local val = player:FindFirstChild(name)
    if not val then
        val = Instance.new("BoolValue")
        val.Name = name
        val.Parent = player
    end
    val.Value = state
end

local function LoadToggle(name)
    local val = player:FindFirstChild(name)
    if val then
        return val.Value
    end
    return false
end

-- Các toggle key
local toggles = {
    AutoFarm = "AutoFarmToggle",
    AutoRaid = "AutoRaidToggle",
    AutoSea = "AutoSeaToggle",
    AutoDojo = "AutoDojoToggle",
    AutoBone = "AutoBoneToggle"
}

-- ============== LOGIC AUTO FARM ==============
local QuestFolder = workspace:WaitForChild("QuestModels")
local EnemiesFolder = workspace:WaitForChild("Enemies")

local MobMap = {
    ["Pirate Quest"] = "Pirate",
    ["Bandit Quest"] = "Bandit",
    ["Fishman Quest"] = "Fishman",
    ["Zombie Quest"] = "Zombie",
    ["Mink Quest"] = "Mink"
}

local AutoFarmRunning = false

local function GetCurrentQuest()
    local success, questName = pcall(function()
        return Comm:InvokeServer("GetQuest")
    end)
    return (success and questName) or ""
end

local function AcceptQuest(questName)
    pcall(function()
        Comm:InvokeServer("StartQuest", questName, 1)
    end)
end

local function FindTargetMob(questName)
    local mobName = MobMap[questName]
    if not mobName then return nil end
    for _, mob in pairs(EnemiesFolder:GetChildren()) do
        if mob.Name == mobName and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            return mob
        end
    end
    return nil
end

local function AutoFarm()
    if AutoFarmRunning then return end
    AutoFarmRunning = true
    while LoadToggle(toggles.AutoFarm) and player.Character and player.Character:FindFirstChild("HumanoidRootPart") do
        local quest = GetCurrentQuest()
        if quest == "" then
            AcceptQuest("Pirate Quest")
            statusLabel.Text = "Trạng thái: Đã nhận nhiệm vụ Pirate Quest"
            wait(3)
        else
            statusLabel.Text = "Trạng thái: Đang farm "..quest
            local mob = FindTargetMob(quest)
            if mob and mob:FindFirstChild("HumanoidRootPart") then
                TweenToPosition(mob.HumanoidRootPart.Position)
                pcall(function()
                    Comm:InvokeServer("Attack", mob.Name)
                end)
                wait(0.5)
            else
                statusLabel.Text = "Trạng thái: Đang tìm mob..."
                wait(2)
            end
        end
        RunService.Heartbeat:Wait()
    end
    statusLabel.Text = "Trạng thái: Đã dừng Auto Farm"
    AutoFarmRunning = false
end

-- ============== LOGIC AUTO RAID ==============
local AutoRaidRunning = false
local function BuyChip()
    pcall(function()
        Comm:InvokeServer("BuyChip")
    end)
    wait(1)
end
local function EnterMachine()
    pcall(function()
        Comm:InvokeServer("StartRaid")
    end)
    wait(1)
end
local function AutoRaid()
    if AutoRaidRunning then return end
    AutoRaidRunning = true
    while LoadToggle(toggles.AutoRaid) do
        statusLabel.Text = "Trạng thái: Đang chuẩn bị Raid"
        BuyChip()
        statusLabel.Text = "Trạng thái: Vào máy Raid"
        EnterMachine()
        statusLabel.Text = "Trạng thái: Raid đang diễn ra..."
        wait(60)
    end
    statusLabel.Text = "Trạng thái: Đã dừng Auto Raid"
    AutoRaidRunning = false
end

-- ============== LOGIC AUTO SEA EVENT ==============
local AutoSeaRunning = false
local function JoinSeaEvent()
    pcall(function()
        Comm:InvokeServer("JoinSeaEvent")
    end)
    wait(1)
end
local function AutoSeaEvent()
    if AutoSeaRunning then return end
    AutoSeaRunning = true
    while LoadToggle(toggles.AutoSea) do
        statusLabel.Text = "Trạng thái: Đang tìm Sea Event"
        JoinSeaEvent()
        wait(30)
    end
    statusLabel.Text = "Trạng thái: Đã dừng Auto Sea Event"
    AutoSeaRunning = false
end

-- ============== LOGIC AUTO DOJO ==============
local AutoDojoRunning = false
local function RunDojo()
    pcall(function()
        Comm:InvokeServer("StartDojo")
    end)
    wait(1)
end
local function AutoDragonDojo()
    if AutoDojoRunning then return end
    AutoDojoRunning = true
    while LoadToggle(toggles.AutoDojo) do
        statusLabel.Text = "Trạng thái: Đang Auto Dragon Dojo"
        RunDojo()
        wait(20)
    end
    statusLabel.Text = "Trạng thái: Đã dừng Auto Dragon Dojo"
    AutoDojoRunning = false
end

-- ============== LOGIC AUTO FARM BONE ==============
local BoneFolder = workspace:FindFirstChild("BoneIsland")
local AutoBoneRunning = false
local function FindBone()
    if BoneFolder then
        for _, bone in pairs(BoneFolder:GetChildren()) do
            if bone:FindFirstChild("Humanoid") and bone.Humanoid.Health > 0 then
                return bone
            end
        end
    end
    return nil
end
local function AutoFarmBone()
    if AutoBoneRunning then return end
    AutoBoneRunning = true
    while LoadToggle(toggles.AutoBone) do
        local bone = FindBone()
        if bone and bone:FindFirstChild("HumanoidRootPart") then
            statusLabel.Text = "Trạng thái: Đang farm Bone"
            TweenToPosition(bone.HumanoidRootPart.Position)
            pcall(function()
                Comm:InvokeServer("Attack", bone.Name)
            end)
            wait(0.5)
        else
            statusLabel.Text = "Trạng thái: Đang tìm Bone"
            wait(3)
        end
    end
    statusLabel.Text = "Trạng thái: Đã dừng Auto Farm Bone"
    AutoBoneRunning = false
end

-- ============== KẾT NỐI GUI VỚI LOGIC ==============

local function OnToggleChange(name, state)
    SaveToggle(name, state)
    if name == toggles.AutoFarm then
        if state then
            spawn(AutoFarm)
        end
    elseif name == toggles.AutoRaid then
        if state then
            spawn(AutoRaid)
        end
    elseif name == toggles.AutoSea then
        if state then
            spawn(AutoSeaEvent)
        end
    elseif name == toggles.AutoDojo then
        if state then
            spawn(AutoDragonDojo)
        end
    elseif name == toggles.AutoBone then
        if state then
            spawn(AutoFarmBone)
        end
    end
end

-- Tạo toggle GUI

local autoFarmToggle = Tabs.Main:AddToggle(toggles.AutoFarm, { Title = "Auto Farm", Default = false }, OnToggleChange)
local autoRaidToggle = Tabs.Main:AddToggle(toggles.AutoRaid, { Title = "Auto Raid", Default = false }, OnToggleChange)
local autoSeaToggle = Tabs.Main:AddToggle(toggles.AutoSea, { Title = "Auto Sea Event", Default = false }, OnToggleChange)
local autoDojoToggle = Tabs.Main:AddToggle(toggles.AutoDojo, { Title = "Auto Dragon Dojo", Default = false }, OnToggleChange)
local autoBoneToggle = Tabs.Main:AddToggle(toggles.AutoBone, { Title = "Auto Farm Bone", Default = false }, OnToggleChange)

-- Load trạng thái toggle đã lưu và kích hoạt lại
local function LoadAllToggles()
    for key, val in pairs(toggles) do
        local state = LoadToggle(val)
        if state then
            if val == toggles.AutoFarm then autoFarmToggle:Set(state)
            elseif val == toggles.AutoRaid then autoRaidToggle:Set(state)
            elseif val == toggles.AutoSea then autoSeaToggle:Set(state)
            elseif val == toggles.AutoDojo then autoDojoToggle:Set(state)
            elseif val == toggles.AutoBone then autoBoneToggle:Set(state)
            end
            OnToggleChange(val, state)
        end
    end
end

LoadAllToggles()

-- Bấm END để ẩn hiện GUI
Window:BindToClose(function()
    statusLabel.Text = "Trạng thái: GUI đã tắt"
end)
